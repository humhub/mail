<?php
/**
 * @link https://www.humhub.org/
 * @copyright Copyright (c) 2023 HumHub GmbH & Co. KG
 * @license https://www.humhub.com/licences
 */

namespace humhub\modules\mail\models;

use humhub\modules\content\components\ContentActiveRecord;
use humhub\modules\content\widgets\richtext\RichText;
use humhub\modules\mail\live\UserMessageDeleted;
use humhub\modules\user\models\User;
use Throwable;
use Yii;
use yii\db\ActiveQuery;
use yii\db\Exception;
use yii\db\StaleObjectException;

/**
 * This class represents abstract class for normal message and state entries within a conversation.
 *
 * The following are the available columns in table 'message_entry':
 * @property int $id
 * @property int $message_id
 * @property int $user_id
 * @property string $entry_content
 * @property int $type
 * @property string $created_at
 * @property int $created_by
 * @property string $updated_at
 * @property int $updated_by
 *
 * The following are the available model relations:
 * @property Message $message
 * @property User $user
 * @property-read string $contentName
 * @property-read string $icon
 * @property-read string $contentDescription
 *
 * @package humhub.modules.mail.models
 * @since 2.1
 */
abstract class AbstractMessageEntry extends ContentActiveRecord
{
    public const TYPE_MESSAGE = 0;
    public const TYPE_USER_JOINED = 1;
    public const TYPE_USER_LEFT = 2;

    /**
     * @inheritdoc
     */
    public $canMove = false;
    /**
     * @inheritdoc
     */
    public $wallEntryClass = null;
    /**
     * @inheritdoc
     */
    public $autoFollow = false;
    /**
     * @inheritdoc
     */
    public $silentContentCreation = true;
    /**
     * @inheritdoc
     */
    protected $moduleId = 'mail';
    /**
     * @inheritdoc
     */
    protected $streamChannel = null;

    protected bool $requiredContent = true;

    /**
     * Get the type of the message entry
     *
     * @return int
     */
    abstract public static function type(): int;

    /**
     * Check if the given or current User can edit the message entry
     *
     * @param User|null $user
     * @return bool
     */
    abstract public function canEdit(?User $user = null): bool;

    /**
     * Notify Users about this message entry
     *
     * @var bool $isNewConversation
     */
    abstract public function notify(bool $isNewConversation = false);

    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'message_entry';
    }

    /**
     * @inheritdoc
     */
    public function rules(): array
    {
        $requiredColumns = ['message_id', 'user_id'];

        if ($this->requiredContent) {
            $requiredColumns[] = 'entry_content';
        }

        return [
            [$requiredColumns, 'required'],
            [['message_id', 'user_id', 'created_by', 'updated_by'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function init(): void
    {
        parent::init();
        $this->type = $this::type();
    }

    /**
     * @inerhitdoc
     */
    public function getContentName(): string
    {
        return Yii::t('MailModule.base', "Message");
    }

    /**
     * @inerhitdoc
     */
    public function getContentDescription(): string
    {
        return $this->entry_content;
    }

    /**
     * @inerhitdoc
     */
    public function getIcon(): string
    {
        return 'fa-envelope';
    }

    /**
     * @param Message $message
     * @param User $user
     * @param string|null $content
     * @return self
     * @throws \yii\base\Exception
     */
    public static function createForMessage(Message $message, User $user, ?string $content = null): self
    {
        // Attach Message Entry
        return new static([
            'message_id' => $message->id,
            'user_id' => $user->id,
            'entry_content' => $content,
            'type' => static::type(),
        ]);
    }

    /**
     * @inheritdoc
     * @throws Exception
     */
    public function beforeSave($insert): bool
    {
        if ($this->isNewRecord) {
            // Updates the updated_at attribute
            $this->message->save();
        }

        return parent::beforeSave($insert);
    }

    /**
     * @inheritdoc
     */
    public function afterSave($insert, $changedAttributes): void
    {
        RichText::postProcess($this->entry_content, $this);
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * Force hard deletion (no soft deletion)
     * @return bool|int
     * @throws StaleObjectException
     * @throws Throwable
     */
    public function delete(): bool|int
    {
        return $this->hardDelete();
    }

    /**
     * @inheritdoc
     */
    public function afterDelete(): void
    {
        if ($this->message instanceof Message) {
            foreach ($this->message->users as $user) {
                Yii::$app->live->send(new UserMessageDeleted([
                    'contentContainerId' => $user->contentcontainer_id,
                    'message_id' => $this->message_id,
                    'entry_id' => $this->id,
                    'user_id' => $user->id,
                ]));
            }
        }

        parent::afterDelete();
    }

    public function getUser(): ActiveQuery
    {
        return $this->hasOne(User::class, ['id' => 'user_id']);
    }

    public function getMessage(): ActiveQuery
    {
        return $this->hasOne(Message::class, ['id' => 'message_id']);
    }
}
